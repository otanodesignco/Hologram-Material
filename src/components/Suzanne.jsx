/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 ./public/models/highpoly/suzanne.glb 
Author: robfaulkner549 (https://sketchfab.com/robfaulkner549)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/high-poly-blender-monkey-suzanne-396cc8d256514020b18dbf59d646294d
Title: High Poly Blender Monkey (Suzanne)
*/

import React, { useEffect, useRef } from 'react'
import { useGLTF, useTexture } from '@react-three/drei'
import { ShaderMaterial, Vector2, Color, BoxGeometry } from 'three'
import { useFrame } from '@react-three/fiber'
import { useControls } from 'leva'


export function Suzanne(props) 
{

  const alpha = props.alpha ? props.alpha : false

  const { speed, FresnelFactor, FresnelBias, FresnelIntensity, rimColor, bodyColor, cutProgress } = useControls(
    {
      speed:
      {
        value: 15,
        min: 1,
        max: 30,
        step: 0.001
      },
      FresnelFactor:
      {
        value: 3.0,
        min: 0,
        max: 30,
        step: 0.001
      },
      FresnelBias:
      {
        value: 0.10,
        min: -1,
        max: 1,
        step: 0.001
      },
      FresnelIntensity:
      {
        value: 1.50,
        min: 0,
        max: 50,
        step: 0.001
      },
      rimColor:
      {
        value: '#02FEFF'
      },
      bodyColor:
      {
        value: '#FF88FE'
      },
      cutProgress:
      {
        value: 0,
        min: 0,
        max: 1,
        step: 0.1
      }
    }
  )

  const uniforms =
{

  uResolution: { value: new Vector2( window.innerWidth, window.innerHeight ) },
  uColor: { value: new Color( 0xFF88FE ) },
  uTime: { value: 0 },
  uTexture: { value: useTexture( '/textures/HologramLines_Cool.png' )},
  uAnimationSpeed: { value: speed },
  uRimColor: { value: new Color( 0x02FEFF ) },
  uFresnelFactor: { value: FresnelFactor },
  uFresnelBias: { value: FresnelBias },
  uIntensity: { value: FresnelIntensity },
  uCutProgress: { value: cutProgress }

}

const vertex = /*glsl*/`
uniform float uTime;

out vec3 vObjectPosition;
out vec2 vUv;
out vec3 vView;
out vec3 vNormal;


void main()
{

  vec4 worldPosition = modelMatrix * vec4( position, 1.0 );
  vec4 worldNormal = modelMatrix * vec4( normal, 0.0 );

  vObjectPosition = worldPosition.xyz;

  vUv = uv;
  vView = normalize( cameraPosition - worldPosition.xyz );
  vNormal = normalize( worldNormal.xyz );

  // add wave to z axis for a wobble effect
  //vec3 wobblePos = position;

  //wobblePos.z += sin( position.x * 0.7 + uTime * 2. ) * 0.5;
  //wobblePos.x += cos( position.y * 0.03 + uTime * 5. ) * 0.1;

  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

}

`

const fragment = /*glsl*/`

uniform vec2 uResolution;
uniform vec3 uColor;
uniform float uTime;
uniform sampler2D uTexture;
uniform float uAnimationSpeed;
uniform float uFresnelFactor;
uniform float uFresnelBias;
uniform vec3 uRimColor;
uniform float uIntensity;
uniform float uCutProgress;

in vec3 vObjectPosition;
in vec2 vUv;
in vec3 vNormal;
in vec3 vView;

/*
//
//  Fresnel function
//
*/

float fresnelFunc( float factor, float fresnelBias, vec3 normal, vec3 view )
{

  return fresnelBias + ( 1.0 - fresnelBias ) * pow( 1.0 - dot( normal , view ), factor );

}

// flicker function

float flicker( float amt, float time )
{
    return clamp( fract( cos( time ) * 43758.5453123 ), amt, 1.0 );
}

// random noise

float random(vec2 uv) 
{ 
  return fract(sin(dot(uv, vec2(12.9898,78.233)))* 43758.5453123);
}

// shine function

float shine( float shineSize, float direction, float speed, float time )
{
    return step( 1.0 - shineSize * 0.5, 0.5 + 0.5 * sin( direction + time * speed ) );
}

float rand(vec2 n) 
{ 
	return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
}

float noise(vec2 p)
{
	vec2 ip = floor(p);
	vec2 u = fract(p);
	u = u*u*(3.0-2.0*u);
	
	float res = mix(
		mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),
		mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);
	return res*res;
}

//	Simplex 3D Noise 
//	by Ian McEwan, Ashima Arts
//
vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}

float snoise(vec3 v){ 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //  x0 = x0 - 0. + 0.0 * C 
  vec3 x1 = x0 - i1 + 1.0 * C.xxx;
  vec3 x2 = x0 - i2 + 2.0 * C.xxx;
  vec3 x3 = x0 - 1. + 3.0 * C.xxx;

// Permutations
  i = mod(i, 289.0 ); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients
// ( N*N points uniformly over a square, mapped onto an octahedron.)
  float n_ = 1.0/7.0; // N=7
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
}


void main()
{

  float time = uTime;

  vec2 objectSpace = vObjectPosition.xy * 0.5 + 0.5;


  //float diffuse = clamp( clamp( normal, ), 0., 1. );

  vec2 uv = gl_FragCoord.xy / uResolution; // screen coordinates

  // vec2 uv = vObjectPosition.xy; // creates a line donw the middle, don't use world space position

  float animationOffset = mod( time * ( uAnimationSpeed * 0.01 ), 1.0 ); // animation calculation that repeats

  uv.y += animationOffset; // animate uv to repeat seamless 

  uv = fract( uv ); // split uv into 2 for tiling

  /* animate uv */


  /* get texture and alpha test */

  vec4 hologramTexture = texture( uTexture, uv); // set lines texture
  vec3 holoLines = 1.0 - hologramTexture.rbg; // get rid of alpha

  float fresnel = fresnelFunc( uFresnelFactor, uFresnelBias, vNormal, vView );

  float alphaClip = holoLines.r; // determine what parts to show

  //if( alphaClip < 0.1 ) discard;

  /* 
  //
  // Flicker Effect
  //
  //
  */

  // flicker calculation
  float flash = flicker( 0.3, uTime );
  // flicker color
  vec3 flashColor = vec3(1.0);
  // flicker effect with color
  flashColor *= flash;

  /**
   * 
   * Shine Calculations
   * 
   */

  // shining calculation
  float shining = shine( 0.001, objectSpace.y, 2.0, time );
  
  // shine color
  vec3 shineColor = vec3( 1.0 );

  shineColor += shining;

  /**
   * 
   * Pixel Fade simplex Noise test
   * 
   */

  vec3 modelSpace = vObjectPosition * 0.5 + 0.5;

  float pixelTime = (0.03 * sin( uTime ) + 0.3) * 10.;

  float pixelFade = step( 1.0 - 0.31, 1.0 - modelSpace.y );

  float pixelScale = mix( 120., 70., pixelFade);

  float pixelNoise = snoise( floor( modelSpace * pixelScale + uTime ) );

  float pixelGradient = step( 1.0 - 0.24 * pixelTime , pixelNoise );

  float pix = 1.0 - mix( pixelFade, pixelGradient, pixelFade );

  /**
   * 
   *  Pixel Noise particles
   * 
   */

  vec2 uv2 = objectSpace;

  // float t = (0.03 * sin( uTime ) + 0.3) * 10.;

  // float faded = step( 1.0 - 0.31, 1.0 - uv2.y );

  // float scale = mix( 200., 60., faded);

  // float fadeNoise = noise( floor( uv2 * scale + uTime ) );

  // float fadeGradient = step( 1.0 - 0.24 * t , fadeNoise );

  // float fade = 1.0 - mix( faded, fadeGradient, faded );

  float cut = 1.0 - step( uCutProgress, uv2.y );

  /* final color 
  //
  //
  //
  */

  // diffuse color
  float diffuse = dot(vNormal, vView );
  vec3 diffuseColor = uColor * diffuse;

  float alpha = ${ alpha ? 'fresnel' : 1.0.toFixed(1) };

  // fresnel color
  vec3 fresnelColor = uRimColor * fresnel * uIntensity;

  vec3 color = vec3(0.);
  color = (diffuseColor * holoLines + fresnelColor); // color lines
  //color = diffuseColor + fresnelColor;
  // mix between the color and the flash effect by an alpha value multipied by the flash calculation
  color = mix( color, flashColor, flash * 0.25);

  // mix between fresnel flashing and shine
  color = mix( color, shineColor, shining * 0.2 );



  gl_FragColor = vec4( color, pix * 0.45 * cut  ); // output color



}


`

const hologramShader = new ShaderMaterial(
  {
    vertexShader: vertex,
    fragmentShader: fragment,
    uniforms: uniforms,
    transparent: true,
  }
)

const model = useRef()

  const { nodes } = useGLTF('./models/highpoly/Monkey.glb')

  useFrame( ( state ) =>
  {

    model.current.material.uniforms.uTime.value = state.clock.elapsedTime
    model.current.material.uniforms.uFresnelFactor.value = FresnelFactor
    model.current.material.uniforms.uFresnelBias.value = FresnelBias
    model.current.material.uniforms.uIntensity.value = FresnelIntensity
    model.current.material.uniforms.uColor.value = new Color( bodyColor )
    model.current.material.uniforms.uRimColor.value = new Color( rimColor )
    model.current.material.uniforms.uCutProgress.value = cutProgress

    

  })

  return (
    <group { ...props } dispose={ null }>
      <mesh
        ref={ model }
        geometry={ nodes.Suzanne.geometry }
        material={ hologramShader }
        rotation-y={ 180 * Math.PI / 180 }
        
      />
    </group>
  )

}

useGLTF.preload('./models/highpoly/Monkey.glb')
